SQL 형태
 

SQL 문법의 종류 3가지

데이터 정의 언어 - ( DDL : Data Definition Language )

 └ 테이블이나 관계의 구조를 생성하는데 사용하며 CREATE, ALTER, DROP,TRUNCATE 문 등이 있다.

 

CREATE - 새로운 데이터베이스 관계 (테이블) View, 인덱스 , 저장 프로시저 만들기.

DROP - 이미 존재하는 데이터베이스 관계 ( 테이블 ) , 뷰 , 인덱스 , 저장 프로시저를 삭제한다.

ALTER - 이미 존재하는 데이터베이스 개체에 대한 변경 , RENAME의 역할을 한다.

TRUNCATE - 관계 ( 테이블 )에서 데이터를 제거한다. ( 한번 삭제시 돌이킬 수 없음.)

데이터 조작 언어 - ( DML : Data Manipulation Language ) 

 └ 테이블에 데이터 검색, 삽입, 수정, 삭제하는 데 사용하며 SELECT, UPDATE, DELETE, INSERT문 등이 있다.

SELECT - 검색(질의)
INSERT - 삽입(등록)
UPDATE - 업데이트(수정)
DELETE - 삭제
 
데이터 제어 언어 - ( DCL : Data Control Language)

 └ 데이터의 사용 권한을 관리하는 데 사용하며 GRANT, REVOKE 문 등이 있다.

GRANT - 특정 데이터베이스 사용자에게 특정 작업에 대한 수행 권한을 부여한다.
REVOKE - 특정 데이터베이스 사용자에게 특정 작업에 대한 수행 권한을 박탈 or 회수 한다.

데이터베이스 사용자에게 GRANT 및 REVOKE로 설정 할 수 있는 권한.

CONNECT - 데이터베이스 or 스키마에 연결하는 권한.
SELECT - 데이터베이스에서 데이터를 검색할 수 있는 권한
INSERT - 데이터베이스에서 데이터를 등록(삽입)할 수 있는 권한
UPDATE - 데이터베이스의 데이터를 업데이트 할 수 있는 권한
DELETE - 데이터베이스의 데이터를 삭제할 수 있는 권한.
USAGE - 스키마 또는 함수와 같은 데이터베이스 개체를 사용할 수 있는 권한

mysql -uroot -p
기본 비밀번호 X
관리자 계정 root >> DB생성 , 삭제 , 사용자 추가 , 삭제

비밀번호 변경 root 계정으로 접속
set password for  계정명@호스트=password('변경비밀번호')

create databases 생성할 이름; 데이터베이스 생성
show databases; 데이터베이스 보기
drop databases 삭제할데이터베이스이름 ; 데이터베이스 삭제
use 데이터베이스 이름 : DB선택
show tables; 선택한 DB의 테이블 조회

수업에서 사용할 sql문
create table MemberJoin(
userId varchar(100) not null,
userPw varchar(100) not null,
userName varchar(200) not null,
userGender varchar(10) not null,
userAge varchar(10) not null,
userAddr varchar(300) not null,
userHobbys varchar(200) not null,
userPhone varchar(200) not null,
primary key(userId)
);

-----------------------------------------------

1.DML(Data Manupulation Langguage)
	(select,update ,insert,delete)

데이터베이스의 테이블에 들어있는 데이터에 변형을 가하는 종류 (데이터 삽입,수정,삭제)의 명령어나 데이터를 조회하거나 
검색하기 위한 명령어를 말한다.

2.DDL(Data Definition Language)
   	(alter,drop.create)

데이터베이스의 테이블에 들어 있는 데이터에 변형을 가하는 종류 (데이터 삽입 ,수정.삭제)의 명령어들을 말함

3.DCL(Data Control Language)
	(grant)

데이터베이스에 접근하고 객체들을 사용하도록 권한을 주고 회수하는 명령어들을 말함 

===

데이터베이스 (DB: DBMS..RDBMS==관계형데이터베이스시스템)

P234
1.스키마 :데이터베이스구조 (RDBMS 테이블 ,관계)
2.CRUD(Create Read Update Delete):데이터베이스의 기능 
  만들고 ,조회하고 ,수정하고 ,제거하고 
3.ORACLE ,Mysql,Mssql,MongoDM

==

먼저  

1.xampp 폴더 →mysql →bin 폴더 들어간다 

2.컴퓨터폴더  오른쪽 버튼 눌러서 → 속성 검색  거기서 고급시스템 설정→환경변수 →path 뒤에 개인c드라이브  ;C:\xampp\mysql

\bin  붙임


3.윈도우 +r    → cmd실행


C:\xampp\mysql\bin

	mysql -uroot -p; 
    
==

관리자 계정 root>>DB생성 ,삭제,사용자 추가 ,삭제 

p240
비빌번호 변경  root 계정으로 접속

set password for 계정  @호스트 =password('변경비빌번호');
set password for root@localhost=password('1111');

exit;




1.DB생성 2.테이블 생성 

1.show databases;/*데이터 베이스 보기*/
2.create database member;/*데이터베이스 생성*/
3.use member;/*데이터베이스 사용 (테이블을 생성할 DB선택)*/
4.show tables; 데이터베이스의 테이블 조회
5.desc joinmember; /*테이블의 구조*/
6.drop table /*테이블 삭제*/

root

create table MembeJon(
	userId varchar(100) not null,
	userPw varchar(100) not null,
	userName varchar(200) not null,
	userGender varchar(10) not null,
	userAge varchar(10) not null,
	userAddr varchar(300) not null,
	userHobbys varchar(300) not null,
	userPhone varchar(200) not null,
	primary key(userId));

------------------------------

데이터 추가 >> 레코드 단위(row)

삽입

insert into 테이블명(필드1,필드..) value('값1'.'값2');

/*더미데이터*/

insert into memberJoin(userId,userPw,userGender,userHobbys,userPhone) value('jgh1','1111','M','등산,여행','010-000-0000');
insert into memberJoin(userId,userPw,userGender,userHobbys,userPhone) value('jgh2','2222','M','등산,여행','010-111-0000');
insert into memberJoin(userId,userPw,userGender,userHobbys,userPhone) value('jgh3','3333','W','영화감상','010-222-0000');
insert into memberJoin(userId,userPw,userGender,userHobbys,userPhone) value('jgh4','4444','M','등산,여행','010-333-0000');
insert into memberJoin(userId,userPw,userGender,userHobbys,userPhone) value('jgh5','5555','W','축구','010-444-0000');

조회

SELECT userId FROM memberJoin;

삭제

DELETE FROM 테이블 WHERE 조건 ; // 조건에 맞는 레코드 삭제

primary key(userId); // 유일성, 중복불가능
// userId는 null값을 허용하지 않는다.(공란허용X), 중복값을 설정 X *//

수정

UPDATE 테이블명 SET 필드명='변경할 값' WHERE 필드명=해당값;

---------------------------

FROM table_references

WHERE where_condition

ORDER BY id DESC LIMIT 2
id column 정렬순서가 역전된 상태에서
2개만 출력됨

UPDATE table_references SET
description='바꿀내용',
title='바꿀내용', WHERE id=2;

WHERE문을 빠뜨리면 정말 큰
재앙이 올 수 있다.

DELETE FROM table_name WHERE

제일 중요한 것은 WHERE 문이다!!!
빠뜨리면 모든 행이 삭제되므로 큰일난다!!

ex) DELETE FROM topic WHERE id = 5;

record, row 행 삭제 

---------------------

1. mysql 한글 깨짐 오류 해결 방법

    ALTER DATABASE db1 DEFAULT CHARACTER SET UTF8;
    만들어진 DB의 캐릭터셋 변경

PHP MySQL 데이터베이스 연결방법 세가지 각각 정리


2. mysql()

    mysql_ 로 시작하는 함수들로 구성되어 있습니다. 현재는 deprecated 되어서 더이상 사용하지 않습니다.

	mysql 함수는 이제는 더 이상 사용되지 않는 절차지향적인 인터페이스에요. 
	mysql 함수에서는 SQL 인젝션을 막기 위해 모든 변수를 수동으로 이스케이프해야해요.

3. mysqli() (PHP5, PHP7)

    mysql 함수를 개선한 것으로 prepared statement를 사용할 수 있다.
    
    mysqli 확장형 함수 mysqli_connect()
    
    new mysqli() 객체를 이용 사용..

	MySQLi는 mysql 함수를 대체하기 위해 만들어진 객체지향적인 인터페이스에요. MySQLi는 Prepared Statement를 지원해요.


4. PDO (PHP Data Object) API (PHP 5 >= 5.1.0, PHP 7):

    PDO는 PHP를 사용하여 서로 다른 종류의 데이터베이스에 접근하는 공통 API를 제공하는 것을 목표로 만들어 졌습니다.
    객체기반의 API 이고, prepared statement를 제공합니다.
    대량의 데이터는 이걸 많이 쓴다.
	
    PDO(PHP Data Objects)는 보다 일반적인 데이터베이스 인터페이스에요. 
	PDO는 객체지향적이고 Prepared Statement를 지원할 뿐만 아니라 많은 MySql 이외의 데이터베이스들도 지원합니다.

----------------------------

create databases 


show databases;

1. use DB명
2. show tables;
3. desc 테이블명 (테이블의 구조)
4. select * from 테이블명
5. insert into 테이블(필드) values(값)
6. update 테이블 set 필드1=변경값, 필드2=변경값 where 조건(ex ) userId='m1';


-------------------------------

mysql_* vs MySQLi vs PDO

1. mysql 함수는 이제는 더 이상 사용되지 않는 절차지향적인 인터페이스에요. mysql 함수에서는 SQL 인젝션을 막기 위해 모든 변수를 수동으로 이스케이프해야해요.

2. MySQLi는 mysql 함수를 대체하기 위해 만들어진 객체지향적인 인터페이스에요. MySQLi는 Prepared Statement를 지원해요.

3. PDO(PHP Data Objects)는 보다 일반적인 데이터베이스 인터페이스에요. PDO는 객체지향적이고 Prepared Statement를 지원할 뿐만 아니라 많은 MySql 이외의 데이터베이스들도 지원해요.

PDO를 추천해드려요

mysql 함수는 보안에 구멍을 만들 수 있고, 코드가 더럽게 보이게 만들어요. 그래서 이제 더 이상 사용되지 않아요.

그러니 선택지는 MySQLi와 PDO 두 개인데, 그 중 PDO를 추천해드려요.

-------------------------------
/*만약 데이터베이스 안에 joinMember테이블이 있으면 이 코드를 실행하지 마라)*/
create table if not exists joinMember(
	userId varchar(100) not null,
    userPw varchar(100) not null,
    userGender varchar(10) not null,
    userHobbys varchar(200) not null,
    userPhone varchar(200) not null,
    primary key(userId);
);
--------------------------------

일반적으로 mysql서버는 따로 설치하여 관리해준다.

--------------------------------

RENAME 명령어를 사용하여 테이블의 이름을 변경할 수 있다.

    RENAME 변경전 테이블명 TO 변경후 테이블명;

    RENAME TEAM_BACKUP TO TEAM;

---------------------------------

$conn=new mysqli("호스트이름","계정아이디",")

-----------------------------------


------------------------

한글깨짐해결

기존의 만들어져있던 Database나 Table들의 Character-Set이 변경되는 것은 아니므로 직접 변경을 해줘야 한다.

현재 Character-Set 확인하기

show variables like 'c%'
status

1. 만들때 utf8 형식으로 만들기

create schema member4 default charset utf8;

create table member4(
userId varchar(100) not null,
userPw varchar(100) not null,
primary key(userId)
)ENGINE = InnoDB default charset=utf8;

2. 기존의 Database의 Character-Set 속성 변경하기

    ALTER DATABASE [DB명] DEFAULT CHARACTER SET utf8;
    

MySQL 재시작하기

service mysql restart

-----------------

컬럼 생성시에 unsigned 선언의 의미

d 같은 경우 솔직히 음수는 쓰지 않으므로

int의 범위에서 반은 쓰질 않는다.

이럴때 unsigned를 선언해 주면 그 범위가 양수로 옮겨진다.

-2147483648 ~2147483647 에서 0 ~ 4294967295 로 옮겨가는 것이다.

-------------

테이블 생성시 
형식을 TIMESTAMP로 하면 데이터를 입력할 때 해당 시간이 찍힌다.
연 월 일 시 분 초  찍힘.

------------------

PHP와 mySQL 연결 로직(논리) 및 알고리즘(계산순서, 처리순서) 필기

$query = "mySQL에 보내줄 쿼리문";

$conn=new mysqli($hostName,$dbId,$dbPw,$dbName); // DB에 접속

$conn->query($query); // 성공하면 1값을 반환

$result=$conn->query($query) ; // DB의 DATA를 GET($result 변수에 담음)

if ($result->num_rows>0) {가져올 레코드가 있으면 while문으로 $row=$result->fetch_assoc(); 하고
                                                echo를 사용하여
                                                $row['userId']나 $row['userPw'] 이런식으로
                                                연관된 배열들을 게시판형식으로 출력해줄 수 있다.
                                                }
                                                else { 가져올 레코드(행) 데이터가 없다고 알려준다.}

if ($result->num_rows==0) {가져올 레코드가 없으면. 로그인 실패라고 알려주고 exit;}

                                                else{ while문으로  
                                                $row=$result->fetch_assoc(); 하고
                                                echo를 사용하여
                                                $row['userId']나 $row['userPw'] 이런식으로
                                                연관된 배열들을 게시판형식으로 출력해줄 수 있다.
                                                }

$row=$result->fetch_assoc() //DB DATA를 레코드 단위로 가져옴


--------------------

$query="쿼리문 블라블라"
$conn->query($query); // 성공하면 1 반환

$result=$conn->query($query);

if($result==1){
    ~~성공! ~~~합니다!
}else{
    ~~실패! ~~합니다!
}

$conn->close(); db 접속 종료

--------------------

if($result->num_rows==0) { 레코드가 없으면
echo 로그인 실패
        경로 돌리기
exit;
}

레코드가 있으면
session_start(); // 로그인 성공시 세션을 설정
$_SESSION['sessionId']=$userId; //아이디 값으로 세션값을 설정

echo 로그인 성공 
        경로 돌리기

$conn->close(); db 접속 종료

------------------------

PDO 클래스 속성 설정

PDO의 오브젝트 변수 -> setAttribute
(속성명, 속성값);

PDO 방식을 통해 오류 정보를 가져오는 모드를 지정해주고, 프리페어드 스테이트 먼트를 통해
속도와 안정성을 향상시킵니다.(안전하게 SQL을 실행하기 위하여 이 설정을 이용)

프리페어드 스테이트먼트는 SQL문의 템플릿을 먼저 준비(prepare)하고
값과 SQL 부분을 명확하게 분리하는 것으로 안전을 담보합니다.
SQL문과 외부의 값을 구별하기 위해 값 부분에 플레이스 홀더라는 식별자를 [:이름]
과 [?]라는 2종류의 형식을 선택하여 지정할 수 있습니다.

--------------------------

DSN 구성하기. DSN이란 데이터 소스 네임, 데이터 원본 이름을 의미한다.

------------------------

트랜잭션

트랜적션이란 여러 처리를 하나의 처리로 묶은 것.

    트랜잭션 내부의 SQL문 실행은 다른 사용자의 조작에 영향을 받지 않고 실행될 수 있습니다.
    예를 들어, 여러 사용자가 동시에 버튼을 눌러 같은 데이터를 수정할 때에 가장 먼저  
    버튼을 누른 사용자의 수정처리는 다른 사용자의 수정처리를 블록합니다.(막습니다.)
    또한, 일련의 처리로 오류가 발생했을 때는 롤백 처리로 데이터를 원상태로 돌리고 종료합니다.
    
    
    처리과정    
    
        트랜잭션 시작
        입력 처리1
        입력 처리2
        수정 처리
        삭제 처리
        트랜젝션 종료
        
        // 만일, 오류가 발생한다면 롤백처리

-------------------------------------

desc 내림차순 큰거에서 작은거로.

asc 오름차순 작은거에서 큰거로.

조회수 업데이트 쿼리문 "update 테이블명 set view=view+1 where id=$id" 
    여기서 view는 조회 컬럼이다.

--------------

ALTER TABLE table_name
ALTER COLUMN column_name datatype;

ALTER TABLE table_name
MODIFY COLUMN column_name datatype;

-----------------

SQL

	DDL 데이터 베이스 정의
	create, drop

	DML 데이터베이스 조작어
	insert, update, select, delete
	추가, 수정, 조회, 삭제

	DCL 데이터베이스 제어
	alter (구조를 변경)

게시글 폼 작성

/* 컬럼 추가 */
alter table [테이블명] add [컬럼명] [타입] [옵션];

/* 컬럼 삭제 */
alter table [테이블명] drop [컬럼명];

/* 컬럼명 변경 및 타입 변경 */
alter table ...........

------------------------------------

PDO 프리페어드 스테이트먼트

    SQL을 안전하게 실행하려면 프리페어드 스테이트먼트라는 기능을 이용해야 합니다.
    프리페어드 스테이트먼트는 SQL로 구성되는 값만 설정할 수 있어 안전하게 처리됩니다.
    같은 SQL문을 반복할 때는 성능 최적화도 기대할 수 있습니다.
    
    프리페어드 스테이트먼트는 SQL문의 탬플릿을 먼저 준비(prepare)하고 값과 SQL 부분을 명확하게
    분리하는 것으로 안전을 담보합니다.

    prepare 메소드로 작성한 SQL문에 인수를 설정하여 실행하면 SQL을 해석하여 캐싱합니다.
    같은 SQL을 두 번째로 실행할 때부터 이 캐시를 이용하기 때문에 속도가 한층 개선됩니다.
    
    플레이스 홀더란?
    
     심볼 또는 수학 식 또는 컴퓨터의 지시를 대체 할 수 있는 특정 부분의 정보이다.

    SQL의 각 플레이스 홀더와 값은 바인드(결합) 해주어야 한다.
        
        이용할 수 있는 메소드로는 두 가지가 있다.
        bindValue와 bindParam 이다.
     
     플레이스 홀더의 종류
     
        이름이 붙은 플레이스 홀더와 ? 플레이스 홀더가 있다.
        
---------------------------------------

PDO의 try catch 구문

    접속 오류를 감지하고 오류 내용을 표시해줍니다.
    또한 try 블록 안에서 데이터를 입력하는 처리를 진행합니다.
    
    사실 try-catch 구문의 진가는 트랜잭션 처리에서 발휘됩니다.
    
    트랜잭션 처리란? 여러 처리를 하나의 처리로 묶은 것입니다.
    트랜잭션 시작과 함꼐 처리를 실행하고 트랜잭션을 종료하여 데이터의 변경을 확정합니다.
    트랜잭션 내부의 SQL문 실행은 다른 사용자의 조작에 영향을 받지 않고 실행될 수 있습니다.
    ex) 여러 사용자가 동시에 버튼을 눌러 같은 데이터를 수정할 때에 가장 먼저 버튼을 누른
        사용자의 수정 처리는 다른 사용자의 수정 처리를 블록합니다.
        또한 일련의 처리로 오류가 발생했을 때는 롤백 처리로 데이터를 원상태로 돌리고 종료합니다.
            (만일 트랜잭션 처리 중에 오류가 발생했다면 catch 블록 안의 rollback 메소드에 따라
             원상태로 돌리고 종료합니다.)
        
        로직
        
        트랜잭션 시작
        입력 처리1
        입력 처리2
        수정 처리
        삭제 처리
        트랜잭션 종료
        
        // 만일, 오류가 발생한다면 롤백 처리 - 원래의 상태로 돌아갑니다.
        
---------------------------------------------

bindValue 메소드의 세 번째 인수에는 데이터형을 써줍니다.
바인드하는 값이 문자열인지 수치인지를 명시하여 SQL 인젝션 공격에 대한 안정성을 높이고 있습니다.
    