1. WEB이란?

	월드 와이드 웹(World Wide Web) 의 줄임말로, 첫 글자를 따서 WWW라고
	부르기도 합니다.
	'웹(web)'을 영어 뜻 그대로 풀이하면 '거미줄'이라는 뜻이며, 이는 '세상의 크기만한 거미줄'이라
	직역할 수 있습니다.

2. 클라이언트, 서버에 대해서 정리

	클라이언트 : 네트워크로 연결된 서버로부터 정보를 제공받는 컴퓨터.
	서버 : 클라이언트에게 네트워크를 통해 정보나 서비스를 제공하는 컴퓨터(server computer) 또는 	          
	            프로그램(server program)을 말한다.

	클라이언트(request) <-> 서버(response)
				PHP, JSP, ASP
	
		
3, XML HTTRRequest 객체에 대해서 정리
	
	XMLHttpRequest는 Microsoft가 만든 JavaScript 개체(object)입니다. 
	후에 Mozilla도 이것을 받아들였습니다.

	최신의 모든 브라우저는 XMLHttpRequest 객체를 지원합니다.
	XMLHttpRequest 객체는 백그라운드에서 웹 서버와 데이터를 교환하기 위해 사용할 수 있습니다.
	이것은, 전체 페이지를 다시 로드하지 않고도, 웹 페이지의 일부를 업데이트할 수 있다는 의미입니다.
	
4. GET, POST 방식의 차이에 대해서 정리

	GET-	클라이언트가 입력한 query의 이름과 값이 결합되어 스트링 형태로 서버에 전달됩니다.
	POST- 	클라이언트에서 데이터를 인코딩 -> 서버측에서 디코딩 해서 사용합니다.

5. PHP란?

	Hypertext Preprocessor 하이퍼텍스트 프리프로세서

	php는 명령 줄 인터페이스 방식의 자체 인터프리터를 제공한다.

	서버 측 오픈 소스 소프트웨어

	다양한 데이터 베이스 지원
	
	응답을 해주기 전에 미리 처리하는 언어.

	PHP는 서버 측에서 실행되는 프로그래밍 언어로 HTML을 프로그래밍적으로 생성해주고, 
	데이터베이스와 상호작용 하면서 데이터를 저장하고, 표현합니다. 
	PHP는 웹을 위해서 만들어졌고, 지금도 웹을 위해서 발전하고 있는 웹을 위한 언어입니다. 
	웹프로그래밍을 위한 높은 생산성을 제공하는 언어입니다. 
	특히 서버에 직접 설치해서 운영할 수 있는 설치형 웹에플리케이션의 대다수가 PHP로 만들어졌습니다. 

6. Mysql에 대해서 정리

	세계에서 가장 많이 쓰이는 오픈 소스의 관계형 데이터베이스 관리 시스템입니다.

-------------------------

1. PHP 이해

    HTML으로 응답하기전에
    처리하는 언어
    
2. PHP 환경 설정

	개인 클라우드 애플리케이션 구현 폴더 안에
	"PHP_환경설정_본인이름.ppt"로 저장

3. PHP 변수와 상수
4. 프로젝트 수행(컨셉설정과, 일정수립)

Apache >> 웹서버
PHP.. >> 프로그래밍언어
Mysql >> DB

XAMP >> 설치

------------------------환경설정----------------------

httpconf 설정

ServerRoot "C:\/xampp/apache" << 실제 서버의 위치
Listen 8088 		     << 포트번호
ServerName localhost:8088    << 서버이름

C:\/xampp/htdoes 기본설정된 기본 서버 루트

D:DocumentRoot << 서버 document Root 재설정

--------php.ini 설정------

filesize 2M
timezone Asia/Seoul
default_charset = "utf-8"
mbstring.language = Korean
mbstring.internal_encoding = UTF-8
mbstring.http_input = UTF-8
mbstring.http_output = UTF-8
mbstring.encoding_translation = On
mbstring.detect_order = UTF-8
mbstring.substitute_character = none
session.gc_maxlifetime=1440 세션값 시간 설정

-------------------------

.html >> PHP 지원 X
.php >> html + PHP 둘다 쓸 수 있음.
.php >> php파일만 쓸 수 있다.

클라이언트	브라우저	>> 서버
		form			2 PHP(서버페이지) >>> DB관련..
요청(request) 1			   3 응답(response)
서버주소:포트
서버이름
localhost:8088
IP주소:포트

---------------------------
PHP변수

변수 : 하나의 data를 저장할 수 있는 공간

1. $기호를 붙여서 사용한다.
2. a~z, 0~9, Oxff, _
3. 대소문자 구별 한다. $MANSO사용불가능 $manso사용가능
4. 숫자로 시작하면 안된다.
5. Data에의 자료형을 따라서 변수의 자료형이 결정
6. 한글은 사용하지 않도록 한다.

--------------------------
PHP echo 사용방법

echo ;// 내장함수

echo "문자열";
echo "gunhee";

$str = "hee";
echo "변수";
echo $str;
echo "$str";

echo "변수HTML태그";
echo 변수."HTML태그";

----------------------------------

변수의 자료형

"data의 자료형에 따라 결정 >> 자바스크립트"

$num=100;// integer(정수)
$num2=1.23;// float(실수)
$str = "manso"; // string(문자열)
$arr=new Array(); // object(배열)
$classEx=new Car();// 외부자원(클래스)
$dataNull=NULL;//null

내장 함수

echo "표시될 내용" ; //브라우저에 표시
gettype(변수); // 변수의 타입을 반환
var_dump(변수); // 변수의 타입과 구조 같이 반환
is_~~ ; // 타입이 true? 맞니..?
----------------------------------
정수와 실수의 자료형 구분

정수  ex) 1

    int 4byte
    long 8byte
    
똑같은 정수인데도 담을 그릇의 크기가 다르다.

실수  ex) 1.1

    기본형은 double 8byte
            float  4byte
        
---------------------------------
isset(변수);// 변수가 있느냐?
----------------------------

form 하면 name, value를 꼭 기억하자!

----------------------------------

// 슈퍼글로벌 변수  ex ) $_POST

브라우저가 살아있는 동안 전체 적용.

브라우저가 실행 되는 동안에 설정

---------------------------------

폼태그의 method >> 폼의 정보를 서버에 전송하는 방식

서버페이지(PHP)

$_POST['name']; // 클라이언트 요청(request) 정보가 post 방식일 때
$_GET['name']; // 클라이언트 요청(request) 정보가 get 방식 일 때
$_REQUEST['name']; // 클라이언트 요청(request) 정보가 post, get

------------------------------

foreach(배열이름 as 키 값){
    echo 키값; // 키에 저장된 data get
}

----------------------------

HTML Preformatted 텍스트 (<pre>) 는  HTML <pre> 요소는 미리 서식이 지정된 텍스트를 나타냅니다(Mark-up). 

echo "<pre>";
print_r($arrInt);
echo "</pre>";

이런식으로 치면 HTML에서 
배열이 이쁘게 보임

-----------------------------

1. echo 와 print의 차이

echo는 그냥 명령문일 뿐이라 함수처럼 사용할 수 없고 리턴 값이 없지만, 
print는 함수처럼 사용할 수 있고 1을 리턴한다는 점이 차이점입니다.
또 다른 점이라면, 코드 실행 속도에 있어서 echo가 print보다 미세하게 빠릅니다. 
그러므로 print 문을 써야 하는 특별한 이유가 없다면 echo를 쓰는 것을 권장합니다.

서버페이지(php)에서 응답 >> 브라우저에 표시

2. php 배열에 대해서 정리

	배열(array)은 한번에 하나 이상의 값들을 담을 수 있는 특별한 변수입니다.

	PHP 에서는 array() 함수를 사용하여 배열을 만듭니다.

	array();

	PHP 에는 배열의 세 가지 유형이 있다:

		Indexed arrays - 숫자 인덱스를 갖는 배열
		Associative arrays - 이름 키(named keys)를 갖는 배열
		Multidimensional arrays - 하나 이상의 배열을 포함하는 배열

	
3. implode() 내장함수에 대해서 정리
	
	배열 요소들을 합쳐서 하나의 문자열로 만들 수 있습니다.

	implode("구분기호",$배열명);

4. explode() 내장함수에 대해서 정리

	구분문자를 경계로 문자열을 배열로 나누어 반환하는 함수이다.
	
	explode($deli, $str)

5. 연관 배열 이란?

	연관 배열(associative array)은 자료구조의 하나로, 
	키 하나와 값 하나가 연관되어 있으며 키를 통해 연관되는 값을 얻을 수 있다. 

6. foreach문에 대해서 정리

	foreach(배열이름 as 키){
 	   echo 키; // 키에 저장된 data get
	}
    
    연관배열
    
    foreach($arrMembers as $key=>$val){ //$key는 문자인덱스, 즉 키를 의미하고 $val은 값을 의미.
        echo $key."=>".$val."<br>";
    }
    
        연관된 키와 값을 키=>값 으로 출력

	
	as 뒤에 변수를 적어두면 루프 안에서 배열 안에 존재하는 각 요소를 꺼내서 쓸 수 있습니다. 
    
배열 : 연관 배열(키,값).." 키와 연관

1. $연관배열명
2. $배열명["userId"]="manso"
3. print $배열명["userId"];
4. Array 함수 이용 (할당)
    $배열 = array(k1=>"값1",k2=>"값2");
    $배열 = [k1=>"값1",k2=>"값2"]; // php 5.4 이상
    
    ==========================================
    
    <?=변수 ?> 값 하나만 찍힘
        ex) <td><?=$members[0]['userId']?></td>
    <?php echo""; ?> 구조 전체가 찍힘
    
    -------------------------------
    
    exit; // 바로 break;
    die("종료"); // 메세지를 남기고 break

------------------------------------------------------
배열의 내장함수

implode('구분기호',배열); // 배열을 구분기호로 문자열로 
explode('구분기호',배열); //문자열을 구분하여 배열로
sort($변수); // 오름차순
rsort($변수); // 내림차순

sort() - sort arrays in ascending order
rsort() - sort arrays in descending order
asort() - sort associative arrays in ascending order, according to the value
ksort() - sort associative arrays in ascending order, according to the key
arsort() - sort associative arrays in descending order, according to the value
krsort() - sort associative arrays in descending order, according to the key
---------------------------------------------------

push // 배열 마지막 요소 뒤 추가

pop // 배열 마지막 요소부터 삭제

array_merge($arr1,$arr2); // 두개의 배열을 하나로 합치는 PHP 내장함수. >> 하나의 새로운 배열 생성.

implode(',',$arr3); // 배열을 구분하여 문자열로 만들어주는 PHP 내장함수.

explode(',',$arr3); // 문자열을 구분하여 배열로 만들어주는 PHP 내장함수.

array_slice($변수,인덱스시작,갯수) 인덱스시작부터 갯수만큼 살림
                                인덱스시작부터 갯수만큼만 살리고 나머지는 자름
                                
------------------------------------------------------

1. PHP 연산자란?

    연산자는 연산을 하기위한 기호이다.

	연산자는 하나 이상의 값(또는, 프로그래밍 은어로 표현)을 받아서 다른 값을 산출합니다. 
	(그러므로 구조 자체는 표현이 됩니다) 그러므로 (print처럼) 값을 반환하는 함수나 구조를 
	연산자로 생각할 수 있고, (echo처럼) 아무것도 반환하지 않는 것을 다른 것으로 생각할 수 있습니다.

2. 산술연산자에 대해서 정리

	산술 연산자는 숫자값을 (리터럴 또는 값) 피 연산자로 사용하고 하나의 숫자를 반환한다. 
	표준 산술 연산자는 덧셈 (+), 뺄셈 (-), 곱셈 (*), 그리고 나눗셈이다 (/).

3. 할당연산자(복합대입)에 대해서 정리

	할당연산자 = 
    왼쪽 연산수가 오른쪽 표현의 값으로 설정됨을 의미합니다. ("를 설정"입니다)
	할당 연산자의 값은 할당된 값입니다. 그러므로, "$a = 3"의 값은 3입니다. 
    
    복합대입연산자
    +=, -=, *=, %=, .=
		

4. 비트연산자에 대해서 정리

	비트 연산자는 정수에 있는 특정 비트를 끄거나 켤 수 있도록 합니다. 
	왼쪽과 오른쪽 인수가 모두 문자열이면, 비트 연산자는 문자의 아스키 값으로 연산합니다.

5. 비교연산자에 대해서 정리

	비교 연산자는 이름 그대로 두 값을 비교하도록 합니다.

	$a == $b	Equal	$a와 $b가 같으면 TRUE.  >> 값만봄

	$a === $b	Identical	$a와 $b가 같고, 같은 자료형이면 TRUE. (PHP 4에서 추가) >> 값+자료형봄

	$a != $b	Not equal	$a가 $b와 같지 않으면 TRUE. >> 값만봄

	$a <> $b	Not equal	$a가 $b와 같지 않으면 TRUE.

	$a !== $b	Not identical	$a가 $b와 같지 않거나, 같은 자료형이 아니면 TRUE. (PHP 4에서 추가) >> 값+자료형봄

	$a < $b	Less than	$a가 $b보다 작으면 TRUE.

	$a > $b	Greater than	$a가 $b보다 크면 TRUE.

	$a <= $b	Less than or equal to	$a가 $b보다 작거나 같으면 TRUE.

	$a >= $b	Greater than or equal to	$a가 $b보다 크거나 같으면 TRUE.
    
    ! >> 아니지?
    <> 다르냐? 다르면 1 출력, true 출력
    !== 다르냐?(값과 자료형)
    != 다르냐?(값)
    == 같으냐?(값)
    === 같으냐?(값과 자료형)


6. 삼항연산자에 대해서 정리

	(expr1) ? (expr2) : (expr3) 표현은 expr1이 TRUE이면 expr2로 평가되고 
	expr1이 FALSE이면 expr3로 평가됩니다.	

7. 논리연산자에 대해서 정리

	$a and $b	And	$a와 $b가 모두 TRUE이면 TRUE.

	$a or $b	Or	$a나 $b가 TRUE이면 TRUE.

	$a xor $b	Xor	$a와 $b중 하나만 TRUE일 때만 TRUE.

	! $a	Not	$a가 TRUE가 아니면 TRUE.

	$a && $b	And	$a와 $b가 모두 TRUE이면 TRUE.

	$a || $b	Or	$a나 $b가 TRUE이면 TRUE.

8. 증감연산자에 대해서 정리

	PHP는 C 형식의 사전, 사후 증가 및 감소 연산자를 지원합니다.

	Note: 증가/감소 연산자는 논리 값에 영향을 주지 않습니다. 
	NULL 값을 감소하는 것도 영향이 없지만, 증가시키면 1이 됩니다.

	++$a	Pre-increment	$a를 1 증가하고, $a를 반환.

	$a++	Post-increment	$a를 반환하고, $a를 1 증가.

	--$a	Pre-decrement	$a를 1 감소하고, $a를 반환.

	$a--	Post-decrement	$a를 반환하고, $a를 1 감소.

--------------------------------------------

break = 루프 탈출
  - for, foreach, while 등 여러 번 반복되는 루프의 경우에 해당됨
  - 루프 이후에 등장하는 코드를 계속 실행함
  - if문은 반복문이 아니라 조건 충족시 1번만 실행되는 코드이므로 해당없음

return = 함수 탈출 또는 인클루드 탈출
  - 함수 안에서 쓰면 함수 실행을 종료하고, 그 함수를 호출했던 지점으로 돌아가서 계속 실행함
  - 함수 밖에서 쓰면 현재 파일을 인클루드했던 파일로 돌아가서 계속 실행함
  - 함수 밖인데 인클루드한 것도 없으면 그냥 종료됨, 즉 exit과 동일한 효과가 됨

exit, die = 무조건 종료
  - 말 그대로 프로그램이 죽어버림
  
  ----------------------------------
  

index.php           login.php                   loginOk.php
a >> login.php      form post loginOk.php       비교연산자 ==, !=
                    userId,userPw               로그인성공 >>> main.php?userId 아이디
                                                로그인실패 >>> 다시 login.php
                                                
                                                main.php

location.href=\"login.php\";

--------------------------------------------
index.php

회원가입, 로그인 폼 검증단계 구현

login.php   loginOk.php >> 성공 >> main.php
                           실패 >> join.php

join.php    joinOk.php  >> 성공 >> login.php

form post
userId,userPw
userHobbys[]
userPhone[]
button
자바스크립트..

-------------------------------------------

1. continue와 break

	continue - 

		continue 문은 PHP에게 현재 루프를 중단하고 바로 다음 루프로 가라고 알리는 것 외에는 
		break 문과 비슷하다. 따라서 전체 루프를 빠져나가는 대신 현재의 루프만 지나간다.

		이 방법은 현재의 루프를 계속 실행할 필요가 없고 프로세서의 시간을 절약해야 하거나, 
		다음 루프로 이동해 오류 발생을 방지하는 등의 경우에 유용하게 사용된다

	
	break -	반복문 탈출시에 사용합니다.

2. include 문

	include will only produce a warning (E_WARNING) and the script will continue
	
3. require 문

	require will produce a fatal error (E_COMPILE_ERROR) and stop the script

4. include, require 차이

	there is one big difference between include and require;
	when a file is included with the include statement and PHP cannot find it, 
	the script will continue to execute.

	if we do the same example using the require statement, 
	the echo statement will not be executed because the script execution dies after 
	the require statement returned a fatal error:

	Use require when the file is required by the application.
	Use include when the file is not required and application should continue when file is not found.
    
---------------------------

큰 그림을 갖고 장기적으로 추구하는 것이 맞겠지만, 
구현의 시작은 차근차근 단계적으로 해야 한다.

프로세스와 가이드도 시대의 변화 시점에 대응해 업데이트 되어야한다.

----------------------------

include, require 정리(에러처리 실행, 중지)

include "파일명" ; // 파일을 포함해라 >> 없으면 warning 경고표시 실행
require "파일명" ; // 파일을 포함해라 >> 없으면 Error 에러표시, 중지된다.

---------------------------

함수

PHP 함수 - 미리 어떤 사용할 목적으로 만들어 놓은 
           내장함수
           
사용자 정의 함수 - 개발자가 직접 만들어 놓은 함수

특징

1. 함수는 호출하고 return문의 반환값을 반환
2. 함수내에 선언된 변수를 지역(local)변수라고 한다.
3. 지역변수는 반드시 초기화를 해주어야 한다.
4. return의 반환값은 호출한 그 시점에서 반환하고
    함수를 종료한다.
    
function 함수(입력인자){ return 반환값; }

함수(입력인자); // call

------------------------------

변수의 scope(유효범위)

지역변수 >> 함수내에서만
전역변수(global) >> 페이지 내에서
슈퍼 전역변수 >> 브라우저 실행중에

슈퍼 글로벌 변수

$_POST , $_GET , $_SESSION 

--------------------------

1. 정보전달 사이트(포털, 뉴스, 신문, 전문성) 빙,야후
2. 홍보광고 사이트(기업,마케팅) 		 http://qnt.co.kr/ 88핫도그
3. 엔터테이먼트 사이트		http://ygp.co.kr/ 
4. 학습 사이트			생활코딩,메가스터디
5. 온라인 상거래 사이트		하나투어,모두투어
6. 커뮤니티 사이트		인스타그램
7. 새로운 기능을 추가한 사이트(독창적인 기능)

----------------------------

unset( 변수   [, 변수들...] )

PHP 함수 중 하나인 unset 함수는 변수 제거에 사용하는 함수입니다. 

* 변수들 : 하나의 변수가 아닌 콤마(,)로 여러개의 변수를 제거할 수도 있습니다.
* 함수 안에서 전역 변수를 unset하면, 로컬 변수만 파괴됩니다. 호출한 환경에서 변수는 unset을 호출하기 전과 같은 값을 유지합니다.

"Unset a given variable"

주어진 변수의 설정을 해제하겠다.

-----------------------------

PHP 내장함수 정리

timestamp()

	The TIMESTAMP() function converts an expression to a datetime value and 
	if specified adds an optional time interval to the value.
	This function will return a datetime value.
	1970년 1월 1일 00:00:00을 기준으로 경과한 초를 의미한다.
	유닉스 시간(영어: Unix time)은 시각을 나타내는 방식이다. 

	echo time(); // 현재 timestamp

date()	

	date — 로컬 날짜/시간을 형식화합니다.
    // date("표시될 포맷",특정 timestamp);
    echo date('y-m-d',time());

mktime()

	The gmmktime() function returns the Unix timestamp for a date.
    
    mk는 만든다는 의미이다.(앞으로도 계속 나옴)
    mktime(시,분,초,월,일,년) >> mk >> 특정 timestamp 만든다.
    
    echo mktime(10,10,10,4,10,2018)."<br>";
    echo date('y-m-d', mktime(10,10,10,4,10,2018));

checkdate()

    날짜 형식이 맞으면 true 값을 반환한다.

getdate(time());

    //get... 가져온다. 날짜를 가져오는데 배열로 가져온다.
    // timestamp를 변환한다. > 배열로

addslashes()

	The addslashes() function returns a string with backslashes in front of predefined characters.

	The predefined characters are:

		single quote (')
		double quote (")
		backslash (\)
		NULL

	PHP runs addslashes() on all GET, POST, and COOKIE data by default. Therefore you should not use 		

addslashes() on strings that have already been escaped, this will cause double escaping. The function 		

get_magic_quotes_gpc() can be used to check this.

htmlspecialchars()

	The htmlspecialchars() function converts some predefined characters to HTML entities.

	The predefined characters are:

	& (ampersand) becomes &amp;
	" (double quote) becomes &quot;
	' (single quote) becomes &#039;
	< (less than) becomes &lt;
	> (greater than) becomes &gt;

	Tip: To convert special HTML entities back to characters, use the htmlspecialchars_decode() function.

nl2br()

	The nl2br() function inserts HTML line breaks (<br> or <br />) in front of each newline (\n) in a string.
    
    // nl2br() 문자열에 포함된 개행 문자를 <br>태그로 모두 바꿈

strcmp("문자열","문자열") , strcmp("문자열","변수명") , strcmp(변수명, 변수명)

	The strcmp() function compares two strings.

trim("문자열")

	The trim() function removes whitespace and other predefined characters from both sides of a string.
    
    문자열 사이 공백을 제거한다.

strlen("문자열")

	The strlen() function returns the length of a string.
    
    문자열의 길이를 리턴한다.(반환하고 종료한다.)

substr()

	substr(string,start,length)
	The substr() function returns a part of a string.
    
str_replace(변수,"바꿀 문자열","대체 문자열")

htmlspecialchars

    이 함수는 문자열에서 특정한 특수 문자를 HTML 엔티티로 변환한다. 
    이 함수를 사용하면 악성 사용자로 부터 XSS 공격을 방지 할 수 있다. 
    변환되는 문자는 아래와 같다.
    
     특수 문자          변환된 문자

    &(앰퍼샌드)            &amp;

    ""(겹따옴표)           &quot;

    ''(홑따옴표)           &#039;

    <(미만)               &lt;

    >(이상)               &gt;
    
-------------------------

내장함수
WEB관련함수
class와 객체
세션 및 쿠키
Mysql 설치 및 SQL
DB관련 함수 mysqli
DB관련 PHP페이지 실습
게시판 구현

-------------------------
5월초 Ajax
cordova node.js 하이브리드앱

-----------------------

jQuery 복습

$(selector).index(element)


index()와 eq() 의 차이점에 대해 알아보기

-----------------------

로그인 체크 페이지 확인해야 할 사항들

1. 공백유무
2. 아이디설정
3. pw 설정
4. 정상
5. session 설정

------------------

1. 데이터베이스

데이터베이스(영어: database, DB)는 체계화된 데이터의 모임이다. 
즉, 작성된 목록으로써 여러 응용 시스템들의 통합된 정보들을 저장하여 운영할 수 있는 공용 데이터들의 묶음이다. 

2. DBMS

데이터베이스 관리 시스템(영어: database management system, DBMS)은 다수의 사용자들이 
데이터베이스 내의 데이터를 접근할 수 있도록 해주는 소프트웨어 도구의 집합이다. 
DBMS은 사용자 또는 다른 프로그램의 요구를 처리하고 적절히 응답하여 데이터를 사용할 수 있도록 해준다.

3. RDBMS

관계형 데이터베이스 관리 시스템(relational database management system, RDBMS)은 
IBM 산호세 연구소의 에드거 F. 커드가 도입한 관계형 모델을 기반으로 하는 데이터베이스 관리 시스템이다.

4. MYSQL

MySQL은 세계에서 가장 많이 쓰이는
오픈 소스의 관계형 데이터베이스 관리 시스템(RDBMS)이다.

-------------------------

abs($num3); // 절댓값 (양수)

round(숫자나 숫자변수, ㅇ); 
ㅇ에 들어가는 거에 따라 달라짐.
// -1 소수 첫째짜리부터 반올림 의미    
//- 1 정수 일의 자리에서 반올림

round() 함수가 우리가 보통 알고 있는 반올림함수다.

ceil(1.2); // 올림  가장 가까운 큰 정수

ceil() 함수는 소수점 자리의 숫자를 무조건 올리는 함수이다.

floor()

floor() 함수는 뜻 그대로 바닥으로 만든다.

소수점 아래를 무조건 무시

max(숫자,숫자,숫자,숫자);
가장 큰 수를 골라낸다.

min(숫자,숫자,숫자,숫자);
가장 작은 수를 골라낸다.

--------------------------

상수 

변하지 않는다. 주로 대문자로 쓴다.

define(상수명,"");

----------------------------

CLASS

class ClassBasic{ // User 클래스 선언

 public $userId; // 
    public으로 멤버(변수 선언)
 public $userEmail;
 // 맴버(필드, 프로퍼티)
 public $userName;
 
 function classMethod(){
  // 맴버 ClassBasic 메소드 선언
    echo($this);
 }
}

클래스(class):객체를 생성하기 위한
설계도(틀)

다량의 데이터들을 처리할 수 있다.

객체 : 현실 세계 모든 것. 정돈된 이름 상자
객체 : 멤버 >> 속성과 메서드
      
객체를 찍어내는 과정을 인스턴스화,
객체화라고 한다.( ex)  new 클래스(); )

변수는 하나
배열은 다수
함수는 기능

클래스는 함수+변수+배열 
        원하는대로 합쳐서 새로운 타입을
        만든다.
        사용자 정의 타입을 만듬.

----------------------

RSA DSA

DSA와 RSA는 동일한 강도라고 할 수있는 두 가지 공통 암호화 알고리즘입니다.

둘의 성능은 다른 것을 구별하는 것입니다.

키를 생성 할 때 DSA가 더 빠릅니다. 반면 RSA

RSA는 DSA보다 암호화가 빠릅니다.

해독 할 때 DSA가 빠릅니다. 주로 해독 성능이 뛰어납니다.

디지털 서명이 필요한 경우 DSA 암호화 알고리즘,
디지털 서명 확인 RSA가 최선의 선택입니다. 

상황에 따라 선택이 필요하지만 DSA와 RSA는 동일한 암호화 기능을 가지고 있으며 자원에 대한 요구가 적은 옵션을 선택해야합니다.

------------------

public 모든접근허용
private 클래스
내에서 접근 가능

----------------

getter 와 setter

게터와 세터

게터와 세터는 전혀 특별한 것이 아니다. 그냥 일반적인 클래스안에 포함된 메소드이다. 
단지 그 역할이 맴버 필드의 변수를 변경해 주는 기능을 갖음으로써 클래스의 맴버 필드를 
보호하는 것이다.

우리는 일정한 상황에 따라 외부에서 접근 가능하게 할 것들을 접근자(getter)와 
설정자(setter)를 설정할 수 있다.

접근자란, 값을 가져올 수 있는 것이고, 설정자는 값을 설정해줄 수 있는 것이다.

------------------

쿠키 : 클라이언트 사용자가 웹 서버에 접속하여 로그인 하였을 때 클라이언트 컴퓨터에 저장되는 데이터

*로그인한 다음 사이트의 어떠한 페이지로 이동하여도 로그인 상태가 유지
*사이트의 어떠한 페이지에서도 로그인된 상태와 로그인된 아이디 등을 이용 가능
*만약 쿠키라는 개념이 없다면 로그인 시 로그인 상태와 로그인 아이디를 DB에 써 넣어야 함

------------------

setcookie("쿠키아이디","쿠키값",쿠키유지시간);
$cookieName="manso"

쿠키(COOKIE)

1. 로그인 정보가 *클라이언트 컴퓨터에 저장
2. 고유한 로그인 정보가 자동으로 하나 설정
3. 로그인 아이디나 비밀번호 특정 값을 설정

-------------------

세션(SESSION)

1. 로그인 정보가 *서버 컴퓨터에 저장 (보안이 쿠키보다 안전)
2. 고유한 로그인 정보가 자동으로 하나 설정
3. 로그인 아이디나 비밀번호 특정 값을 설정

session_start() 항상 먼저 설정
$_SESSION['세션아이디']; 세션 설정

세션시간 >> php.ini 파일에서
session.gc_maxlifetime=60*10 설정하면
사용자가 아무런 입력이 없을 경우 10분 후 로그인 상태가 해제됩니다.

unset(세션아이디); 세션삭제(특정 세션 삭제)
session_destory(); // 모든 세션을 삭제

*로그인 할 때는 거의 90프로이상 세션을 쓴다.
보안상 이점때문!

세션은 브라우저를 끄면 사라지기 때문에
세션을 유지하기 위해서 세션 코딩을 해주는 것이다.

-----------------------------------------

PHP에서 exit ()와 die ()는 동일합니다.

------------------------------

echo와 print의 차이점

print는 입력이 한 개이고 리턴 값을 가집니다.
항상 1이라는 숫자를 리턴해요.

echo는 하나 이상의 문자열을 출력합니다.
입력 값이 여러개라는 이야기지요.
아무것도 결과물로 돌려주지 않아요.
물론 HTML로 출력해주는 역할을 하지만 리턴 값이 없습니다.

-------------------------------

인스턴스의 생성

    객체를 추상화한 것이 클래스이다. (찍어내는 틀, 형판, 탬플릿)
    
    인스턴스는 클래스를 실체화한 것이다. (사례, 실체, 찍어낸 것.)
    
    클래스를 실제로 이용하려면 실체화하여 인스턴스(사례)를 생성해야 한다.
    
    실체화하는 과정을 인스턴스화라고도 한다.

클래스의 접근 제한 키워드

    public 외부에서 참조할 수 있음
    private 변수를 선언한 클래스 안에서만 참조할 수 있음
    protected 변수를 선언한 클래스와 상속 받은 클래스에서 참조할 수 있음

클래스에서 멤버 변수는 이 세가지 키워드 중 하나라도 선언하지 않으면
오류가 발생하지만, 메소드는 별도로 키워드를 선언하지 않으면
자동으로 public을 선언한 것 처럼 동작한다.

------------------------------

함수와 메소드

공통점 : 특정한 연산(로직)을 처리하는 것은 같음.

차이점 : 함수는 절차지향일 때.

        메소드는 객체지향에서 class를 사용하고 인스턴스를 만들었을 경우 class 내 함수를
        사용할 때 이를 메소드라고 부른다.

------------------------------


"";
' '


" "

ㄴㅇ라ㅓㄴㅇㅁ란ㅇ멀낭ㅁ럼ㄴ아런ㅇㅁ라ㅓㄴㅇㅁ란어라러
<input>


클래스의 상속

상속(Inheritance)이란 클래스를 정의할 때 다른 클래스의 내부 데이터(멤버)나 절차(메소드)를 이어받아
새로운 클래스를 작성할 수 있는 기능입니다.

객체지향에서는 상속하는 클래스를 슈퍼(부모)클래스, 상속받은 클래스를 서브(자식)클래스라고 합니다.
    상속하는 클래스 : 슈퍼 클래스, 부모 클래스
    상속받은 클래스 : 서브 클래스, 자식 클래스
    
서브클래스는 슈퍼클래스가 가진 기능을 상속받아 그대로 이용할 수 있다.
즉 슈퍼클래스에 있는 사용하고 싶은 멤버변수나 메소드를 서브클래스에서 다시 정의하지 않고 그대로 이용할 수 있음.

서브클래스 안에서는 슈퍼클래스에 있는 같은 메소드명으로 정의하는 오버라이드(override)도 할 수 있습니다.


클래스를 상속하려면 extends 키워드를 사용한다.

    새로운 클래스명(서브클래스)의 뒤에 extends를 기술하고 상속할 클래스명(슈퍼클래스)를 그 뒤에 붙인다.

*protected로 선언된 멤버 변수와 메소드는 슈퍼클래스와 상속받은 서브클래스에서만 접근할 수 있다.
    private와 차이점? private는 그 클래스에서만 참조 가능한데 protected는 상속받은 서브클래스에서도
                    참조가 가능하다.


상속이나 오버라이드를 이용하면 코딩할 양이 줄어들거나 버그가 발생할 소지를 미리 막을 수 있습니다.
또한, 클래스 자체의 관계를 명확하게 하여 계층화할 수 잇습니다.

---------------------------------

Traits

트레이트란?

코드를 재이용하기 위한 방법.
클래스의 [상속]과는 다른 방법으로 기능(메소드)이나 멤버 변수(프로퍼티)를 클래스에 추가할 수 있습니다.
클래스처럼 인스턴스를 작성할 수는 없지만 몇가지 기능을 합쳐서 클래스를 다중 상속을 받은 것처럼
여러가지 기능을 사용할 수 있어 편리하다.

트레이트를 이용하여 메소드를 클래스에 포함할 때 이름이 같은 메소드가 존재하는 경우 우선순위가 높은
메소드를 오버라이드(재정의)한다.

우선순위 : 클래스의 메소드가 최우선, 다음으로 트레이트의 메소드, 그 다음으로 상속한 메소드 순이다.

            override 우선순위 : 클래스메소드>트레이트메소드>상속한메소드

*PHP의 클래스 상속은 하나의 메소드만 가능하지만 
(단일 상속만 가능 다중 상속 불가능 상속할 수 있는 클래스는 단 하나 뿐이다.), 
트레이트를 사용하면 여러 개를 추가할 수 있다.

*트레이트는 인스턴스화(실체화)할 수 없다.

p.s - 클래스 내부에서 트레이트를 지정하는 것처럼 
      트레이트 내부에서 [use]로 지정하여 다른 트레이트를 포함할 수 있다.
      
      
----------------------------------

클래스의 설계 ex) 회원제 사이트

1. 시나리오 분석하기

실제 업무에서는 클래스를 설계할 때 유즈케이스 다이어그램을 그린다거나 
시나리오를 분석하여 클래스를 추출(발현)하는 작업을 합니다.
시나리오에는 어떤 정보와 처리가 필요한지 생각해보며 클래스를 설계하는 것이 좋습니다.

(생각나는 시나리오를 일단 써본다.)

2. 기능을 작성하기

시나리오를 기반으로 회원제 사이트에 필요한 기능을 작성합니다.

(시나리오를 구조화하여 필요한 기능들을 순서대로 써본다. )

3. 필요한 정보

처음부터 완벽하게 만들려고 하면 프로그래밍 자체가 복잡해집니다.
부족한 정보나 처리는 나중에 추가할 수 있으므로 부담 없이 필요한 부분만
우선 진행해 보도록 합니다.

(기능에 필요한 정보들을 나열해본다. 예) 회원이름, 메일주소, 패스워드 등등)

4. 필요한 처리

처리를 작성하려면 사용자가 어떤 조작을 할지, 조작을 하려면 무엇이 필요한지 생각해야 합니다.

(사용자 인터페이스를 생각해본다. User Interface)


*시나리오를 분석하면서 필요한 클래스만 작성하도록 합니다.
클래스는 가능한 작게 만드는 것이 좋습니다.
클래스는 좀 더 상세하게 나눌 수도 있지만 
설계단계에서는 우선 클래스를 간단하게 나눕니다.

*클래스는 데이터(정보)와 메소드(처리)를 합친 것입니다.

-------------------------------------

클래스 안의 상수

    클래스 안에서도 값을 변경할 수 없는 [상수]를 정의할 수 있습니다.
    define 변수 대신에 [const] 키워드를 사용해 [const 상수명 = 값;]과 같이 기술합니다.
    변수를 나타내는 $ 문자는 붙일 필요가 없습니다.
    
    클래스 안에서 참조하는 경우에는 [self] 키워드와 [::] 연산자를 써서 [self::변수명]처럼
    기술합니다.
    인스턴스를 나타내는 [$this]는 사용하지 않고 클래스 자신을 나타내는 [self]를 사용합니다.

예시

    <?php
        class Member{
            const AdultAge = 20; // const를 지정하고 상수를 선언합니다.
            function printAdultAge(){
                print self::AdultAge; // self에 의해 상수를 참조합니다.
            }
        }
        ?>

---------------------------------------

클래스의 설계에서 PHP 문법으로 고쳐 쓰기

    데이터는 클래스 내부에서 처리하기 위해 접근 제한 키워드인 private를 지정하여
    외부에서 접근할 수 없도록 합니다.
    메소드는 모두 클래스 외부에서 실행하기 때문에 [public]으로 지정합니다.
    클래스를 설계하고 나서 부족한 부분들은 TO DO 리스트로서 코드 안에 주석으로
    기술해 두면 나중에라도 해결할 수 있습니다.

데이터를 설정하는 메소드(set)와 데이터를 취득하는 메소드(get)의 쓰임새

    일반적으로 클래스내의  get~~ 메소드로 데이터를 취득한다.
    일반적으로 set~~ 메소드로 데이터를 설정한다.
    
    쓰는 이유? 멤버 필드를 보호하기 위함이다.

---------------------------------------

PDO 방식은 주입(injection) 공격을 막아준다.

pdo방식에서 출력은 따로 막아줘야 한다.

Prepared statements protect against SQL injection, not XSS. 
To do that, you'll always have to pass any untrusted data through either htmlentities or htmlspecialchars.